{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/customers/customer.component.ts","./src/app/customers/customer.component.html","./src/app/customers/customer.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Demo';\n}\n","<div class=\"container\">\n  <app-customer></app-customer>\n</div>\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { CustomerComponent } from './customers/customer.component';\n\n@NgModule({\n  declarations: [AppComponent, CustomerComponent],\n  imports: [BrowserModule, ReactiveFormsModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  FormGroup,\n  FormControl,\n  FormBuilder,\n  Validators,\n  AbstractControl,\n  ValidatorFn,\n} from '@angular/forms';\n\nimport { Customer } from './customer';\nimport { ÉµNullViewportScroller } from '@angular/common';\n\n// Initial custom validator function for the rating. The max and min vlaues are hard coded\n/*function ratingRange(c: AbstractControl): { [key: string]: boolean } | null {\n  if ((c.value !== null && isNaN(c.value)) || c.value < 1 || c.value > 5) {\n    return { range: true };\n  }\n\n  return null;\n}*/\n\n// Factory function that accepts the min and max values as parameters and returs\n// a custon validator function.\nfunction ratingRange(min: number, max: number): ValidatorFn {\n  return (c: AbstractControl): { [key: string]: boolean } | null => {\n    if (\n      (c.value !== null && isNaN(c.value)) ||\n      c.value < min ||\n      c.value > max\n    ) {\n      return { range: true };\n    }\n\n    return null;\n  };\n}\n\nfunction emailCompare(c: AbstractControl): { [key: string]: boolean } | null {\n  const email = c.get('email');\n  const confirmedEmail = c.get('confirmEmail');\n\n  if (email.pristine || confirmedEmail.pristine) {\n    return null;\n  }\n\n  if (email.value !== confirmedEmail.value) {\n    return { match: true };\n  }\n  return null;\n}\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css'],\n})\nexport class CustomerComponent implements OnInit {\n  customer = new Customer();\n  customerForm: FormGroup;\n  emailValidationMessage: string;\n\n  private validationMessages = {\n    required: 'Please enter your email address.',\n    email: 'Please enter a valid email address.',\n  };\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    // this.customerForm = this.fb.group({\n    //   firstName: { value: 'Jack', disabled: true },\n    // });\n\n    this.customerForm = this.fb.group({\n      firstName: ['', [Validators.required, Validators.minLength(3)]],\n      lastName: ['', [Validators.required, Validators.max(50)]],\n      emailGroup: this.fb.group(\n        {\n          email: ['', [Validators.required, Validators.email]],\n          confirmEmail: ['', Validators.required],\n        },\n        { validator: emailCompare }\n      ),\n      sendCatalog: true,\n      phone: '',\n      notification: 'email',\n      rating: [null, ratingRange(1, 5)],\n    });\n\n    this.customerForm.get('notification').valueChanges.subscribe((value) => {\n      console.log(value);\n\n      this.setNoficationVia(value);\n    });\n\n    const emailControl = this.customerForm.get('emailGroup.email');\n    emailControl.valueChanges.subscribe((value) => {\n      value = this.setMessage(value);\n    });\n\n    // this.customerForm = new FormGroup({\n    //   firstName: new FormControl(),\n    //   lastName: new FormControl(),\n    //   email: new FormControl(),\n    //   sendCatalog: new FormControl(),\n    // });\n  }\n\n  populateTestValues(): void {\n    this.customerForm.setValue({\n      firstName: 'Jack',\n      lastName: 'Harness',\n      email: 'jack@harnesstrading.com',\n      sendCatalog: true,\n    });\n  }\n\n  patchTestData(): void {\n    this.customerForm.patchValue({\n      firstName: 'Jack',\n      lastName: 'Harness',\n    });\n  }\n\n  save(): void {\n    console.log(this.customerForm);\n    console.log('Saved: ' + JSON.stringify(this.customerForm.value));\n  }\n\n  setNoficationVia(notifyVia: string): void {\n    const phoneControl = this.customerForm.get('phone');\n\n    if (notifyVia === 'text') {\n      phoneControl.setValidators(Validators.required);\n    } else {\n      phoneControl.clearValidators();\n    }\n    phoneControl.updateValueAndValidity();\n  }\n\n  setMessage(c: AbstractControl): void {\n    this.emailValidationMessage = '';\n\n    if ((c.touched || c.dirty) && c.errors) {\n      this.emailValidationMessage = Object.keys(c.errors)\n        .map((key) => {\n          this.validationMessages[key];\n        })\n        .join(' ');\n    }\n  }\n}\n","<div class=\"card\">\n  <div class=\"card-header\">\n    Sign Up!\n  </div>\n\n  <div class=\"card-body\">\n    <form novalidate\n          (ngSubmit)=\"save()\"\n          [formGroup]=\"customerForm\">\n\n      <div class=\"form-group row mb-2\">\n        <label class=\"col-md-2 col-form-label\"\n               for=\"firstNameId\">First Name</label>\n        <div class=\"col-md-8\">\n          <input class=\"form-control\"\n                 id=\"firstNameId\"\n                 type=\"text\"\n                 placeholder=\"First Name (required)\"\n                 formControlName=\"firstName\"\n                 [ngClass]=\"{'is-invalid': (customerForm.get('firstName').touched || customerForm.get('firstName').dirty) && !customerForm.get('firstName').valid }\" />\n          <span class=\"invalid-feedback\">\n            <span *ngIf=\"customerForm.get('firstName').errors?.required\">\n              Please enter your first name.\n            </span>\n            <span *ngIf=\"customerForm.get('firstName').errors?.minlength\">\n              The first name must be longer than 3 characters.\n            </span>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"form-group row mb-2\">\n        <label class=\"col-md-2 col-form-label\"\n               for=\"lastNameId\">Last Name</label>\n        <div class=\"col-md-8\">\n          <input class=\"form-control\"\n                 id=\"lastNameId\"\n                 type=\"text\"\n                 placeholder=\"Last Name (required)\"\n                 formControlName=\"lastName\"\n                 [ngClass]=\"{'is-invalid': (customerForm.get('lastName').touched || customerForm.get('lastName').dirty) && !customerForm.get('lastName').valid }\" />\n          <span class=\"invalid-feedback\">\n            <span *ngIf=\"customerForm.get('lastName').errors?.required\">\n              Please enter your last name.\n            </span>\n            <span *ngIf=\"customerForm.get('lastName').errors?.maxlength\">\n              The last name must be less than 50 characters.\n            </span>\n          </span>\n        </div>\n      </div>\n\n      <div formGroupName=\"emailGroup\">\n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"emailId\">Email</label>\n          <div class=\"col-md-8\">\n            <input class=\"form-control\"\n                   id=\"emailId\"\n                   type=\"email\"\n                   placeholder=\"Email (required)\"\n                   formControlName=\"email\"\n                   [ngClass]=\"{'is-invalid': emailValidationMessage}\" />\n            <span class=\"invalid-feedback\">\n              {{emailValidationMessage}}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"emailId\">Confirm Email</label>\n          <div class=\"col-md-8\">\n            <input class=\"form-control\"\n                   id=\"confirmEmailId\"\n                   type=\"email\"\n                   placeholder=\"Confirm Email (required)\"\n                   formControlName=\"confirmEmail\"\n                   [ngClass]=\"{'is-invalid': customerForm.get('emailGroup').errors ||\n                                            ((customerForm.get('emailGroup.confirmEmail').touched\n                                            || customerForm.get('emailGroup.confirmEmail').dirty)\n                                            && !customerForm.get('emailGroup.confirmEmail').valid) }\" />\n            <span class=\"invalid-feedback\">\n              <span *ngIf=\"customerForm.get('emailGroup.confirmEmail').errors?.required\">\n                Please confirm your email address.\n              </span>\n\n              <span *ngIf=\"customerForm.get('emailGroup').errors?.match\">\n                Email addresses do not match\n              </span>\n            </span>\n          </div>\n        </div>\n      </div>\n\n\n\n      <div class=\"form-group row mb-2\">\n        <label class=\"col-md-2 col-form-label\"\n               for=\"phoneId\">Phone</label>\n        <div class=\"col-md-8\">\n          <input class=\"form-control\"\n                 id=\"phoneId\"\n                 type=\"tel\"\n                 placeholder=\"Phone Number (required)\"\n                 formControlName=\"phone\"\n                 [ngClass]=\"{'is-invalid': (customerForm.get('phone').touched || customerForm.get('phone').dirty) && !customerForm.get('phone').valid }\" />\n          <span class=\"invalid-feedback\">\n            <span *ngIf=\"customerForm.get('phone').errors?.required\">\n              Please enter your phone number.\n            </span>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"form-group row mb-2\">\n        <div class=\"col-md-8\">\n          <div class=\"form-check\">\n            <label class=\"form-check-label\">\n              <input class=\"form-check-input\"\n                     id=\"sendCatalogId\"\n                     type=\"checkbox\"\n                     formControlName=\"sendCatalog\"> Send me your catalog\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row mb-2\">\n        <label class=\"col-md-2 col-form-label pt-0\">Send Notifications</label>\n        <div class=\"col-md-8\">\n          <div class=\"form-check form-check-inline\">\n            <label class=\"form-check-label\">\n              <input class=\"form-check-input\"\n                     type=\"radio\"\n                     value=\"email\"\n                     formControlName=\"notification\"> Email\n            </label>\n          </div>\n\n          <div class=\"form-check form-check-inline\">\n            <label class=\"form-check-label\">\n              <input class=\"form-check-input\"\n                     type=\"radio\"\n                     value=\"text\"\n                     formControlName=\"notification\"> Text\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row mb-2\">\n        <label class=\"col-md-2 col-form-label\"\n               for=\"ratingId\">Rating</label>\n        <div class=\"col-md-8\">\n          <input class=\"form-control\"\n                 id=\"ratingId\"\n                 type=\"number\"\n                 formControlName=\"rating\"\n                 [ngClass]=\"{'is-invalid': (customerForm.get('rating').touched ||\n                                             customerForm.get('rating').dirty) &&\n                                             !customerForm.get('rating').valid }\" />\n          <span class=\"invalid-feedback\">\n            <span *ngIf=\"customerForm.get('rating').errors?.range\">\n              Please rate your experience from 1 to 5.\n            </span>\n          </span>\n        </div>\n      </div>\n\n      <!-- <div *ngIf=\"customer.sendCatalog\">\n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label pt-0\">Address Type</label>\n          <div class=\"col-md-8\">\n            <div class=\"form-check form-check-inline\">\n              <label class=\"form-check-label\">\n                <input class=\"form-check-input\"\n                       id=\"addressType1Id\"\n                       type=\"radio\"\n                       value=\"home\"\n                       [(ngModel)]=\"customer.addressType\"\n                       name=\"addressType\"> Home\n              </label>\n            </div>\n            <div class=\"form-check form-check-inline\">\n              <label class=\"form-check-label\">\n                <input class=\"form-check-input\"\n                       id=\"addressType1Id\"\n                       type=\"radio\"\n                       value=\"work\"\n                       [(ngModel)]=\"customer.addressType\"\n                       name=\"addressType\"> Work\n              </label>\n            </div>\n            <div class=\"form-check form-check-inline\">\n              <label class=\"form-check-label\">\n                <input class=\"form-check-input\"\n                       id=\"addressType1Id\"\n                       type=\"radio\"\n                       value=\"other\"\n                       [(ngModel)]=\"customer.addressType\"\n                       name=\"addressType\"> Other\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"street1Id\">Street Address 1</label>\n          <div class=\"col-md-8\">\n            <input class=\"form-control\"\n                   id=\"street1Id\"\n                   type=\"text\"\n                   placeholder=\"Street address\"\n                   [(ngModel)]=\"customer.street1\"\n                   name=\"street1\">\n          </div>\n        </div>\n\n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"street2Id\">Street Address 2</label>\n          <div class=\"col-md-8\">\n            <input class=\"form-control\"\n                   id=\"street2Id\"\n                   type=\"text\"\n                   placeholder=\"Street address (second line)\"\n                   [(ngModel)]=\"customer.street2\"\n                   name=\"street2\">\n          </div>\n        </div>\n\n        <div class=\"form-group row mb-2\">\n          <label class=\"col-md-2 col-form-label\"\n                 for=\"cityId\">City, State, Zip Code</label>\n          <div class=\"col-md-3\">\n            <input class=\"form-control\"\n                   id=\"cityId\"\n                   type=\"text\"\n                   placeholder=\"City\"\n                   [(ngModel)]=\"customer.city\"\n                   name=\"city\">\n          </div>\n          <div class=\"col-md-3\">\n            <select class=\"form-control\"\n                    id=\"stateId\"\n                    [(ngModel)]=\"customer.state\"\n                    name=\"state\">\n              <option value=\"\"\n                      disabled\n                      selected\n                      hidden>Select a State...</option>\n              <option value=\"AL\">Alabama</option>\n              <option value=\"AK\">Alaska</option>\n              <option value=\"AZ\">Arizona</option>\n              <option value=\"AR\">Arkansas</option>\n              <option value=\"CA\">California</option>\n              <option value=\"CO\">Colorado</option>\n              <option value=\"WI\">Wisconsin</option>\n              <option value=\"WY\">Wyoming</option>\n            </select>\n          </div>\n          <div class=\"col-md-2\">\n            <input class=\"form-control\"\n                   id=\"zipId\"\n                   type=\"number\"\n                   placeholder=\"Zip Code\"\n                   [(ngModel)]=\"customer.zip\"\n                   name=\"zip\">\n          </div>\n        </div>\n      </div> -->\n\n      <div class=\"form-group row mb-2\">\n        <div class=\"offset-md-2 col-md-4\">\n          <button class=\"btn btn-primary mr-3\"\n                  type=\"submit\"\n                  style=\"width:80px\"\n                  [title]=\"customerForm.valid ? 'Save your entered data' : 'Disabled until the form data is valid'\"\n                  [disabled]=\"!customerForm.valid\">\n            Save\n          </button>\n\n          <!-- <button class=\"btn btn-primary\"\n                  (click)=\"populateTestValues()\">\n            Populate Test Data\n          </button>\n          <button class=\"btn btn-primary\"\n                  (click)=\"patchTestData()\">\n            Patch Test Data\n          </button> -->\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n<br>Dirty: {{ customerForm.dirty }}\n<br>Touched: {{ customerForm.touched }}\n<br>Valid: {{ customerForm.valid }}\n<br>Value: {{ customerForm.value | json }}\n","export class Customer {\n\n  constructor(\n    public firstName = '',\n    public lastName = '',\n    public email = '',\n    public sendCatalog = false,\n    public addressType = 'home',\n    public street1?: string,\n    public street2?: string,\n    public city?: string,\n    public state = '',\n    public zip?: string) { }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}